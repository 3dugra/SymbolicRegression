<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="app.diagrams.net" modified="2025-03-09T12:00:00.000Z" agent="ChatGPT" version="14.6.13">
  <!-- Page 1: Main Module -->
  <diagram id="MainModule" name="Main Module">
    <mxGraphModel dx="1086" dy="620" grid="1" gridSize="10">
      <root>
        <mxCell id="0"/>
        <mxCell id="1" parent="0"/>
        <!-- parse_data_file function -->
        <mxCell id="parse_data_file" value="parse_data_file(path: &amp;str) : Result((Array2&lt;f64&gt;, Array1&lt;f64&gt;), Error)
-------------------------
Description:
• Reads file content as a string.
• Extracts the data block between '[' and ']'.
• Splits rows using ‘;’ and parses each row into numbers.
• Populates and returns an Array2 (inputs) and an Array1 (outputs)." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#E1D5E7;strokeColor=#9673A6;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="30" width="380" height="120" as="geometry"/>
        </mxCell>
        <!-- main function -->
        <mxCell id="main_func" value="main() : Result&lt;(), Error&gt;
-------------------------
Description:
• Starts a timer.
• Loads configuration from 'config.toml'.
• Loads training and testing data via parse_data_file.
• Initializes the SymbolicRegressor.
• Evolves the population over generations with logging and early stopping.
• Prints total execution time and returns the result." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#DAE8FC;strokeColor=#6C8EBF;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="450" y="30" width="380" height="140" as="geometry"/>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  
  <!-- Page 2: Config Module -->
  <diagram id="ConfigModule" name="Config Module">
    <mxGraphModel dx="1078" dy="684" grid="1" gridSize="10">
      <root>
        <mxCell id="0"/>
        <mxCell id="1" parent="0"/>
        <!-- Config struct -->
        <mxCell id="cfg_struct" value="struct Config
-------------------------
Description:
• Holds parameters for population size, mutation rates, weights, and other settings.
• Methods:
   - target_time(): Returns target Duration.
   - load(path): Loads configuration from a TOML file.
   - Default: Provides default configuration values." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FFE6CC;strokeColor=#D79B00;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="40" y="30" width="300" height="140" as="geometry"/>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  
  <!-- Page 3: Expr Module -->
  <diagram id="ExprModule" name="Expr Module">
    <mxGraphModel dx="1078" dy="684" grid="1" gridSize="10">
      <root>
        <mxCell id="0"/>
        <mxCell id="1" parent="0"/>
        <!-- Expr enum -->
        <mxCell id="expr_enum" value="enum Expr
-------------------------
Description:
• Represents symbolic expressions with variants:
   Constant, Variable, Add, Sub, Mul, Div, Pow, GValue, RValue.
• Methods:
   - prototype(): Returns a basic prototype expression.
   - random(depth): Generates a random expression.
   - mutate(depth): Mutates the expression.
   - get_random_subtree(): Retrieves a random subtree.
   - simplify(): Simplifies the expression.
   - evaluate() / evaluate_with_depth(): Evaluates the expression with a depth limit.
   - dimensionality(): Determines the expression's physical dimension.
   - expr_complexity(): Computes the complexity of the expression.
   - Display: Implements string conversion." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#FFCCCC;strokeColor=#CC0000;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="30" width="420" height="160" as="geometry"/>
        </mxCell>
        <!-- Dimension enum -->
        <mxCell id="dim_enum" value="enum Dimension
-------------------------
Description:
• Represents dimensions like Voltage, Resistance, Conductance, Power, Dimensionless, and Invalid." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#CCCCFF;strokeColor=#6666FF;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="200" width="420" height="60" as="geometry"/>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  
  <!-- Page 4: SymbolicRegressor Module -->
  <diagram id="SymbolicRegressorModule" name="SymbolicRegressor Module">
    <mxGraphModel dx="1078" dy="684" grid="1" gridSize="10">
      <root>
        <mxCell id="0"/>
        <mxCell id="1" parent="0"/>
        <!-- SymbolicRegressor struct -->
        <mxCell id="sr_struct" value="struct SymbolicRegressor
-------------------------
Description:
• Manages a population of expressions for symbolic regression.
• Fields include:
   config, population, inputs, outputs, pop_size, stagnation_count, generation_times, fitness_cache.
• Methods:
   - new(): Initializes the regressor with a given config and population.
   - update_stagnation(): Updates the stagnation counter based on fitness.
   - calculate_mutation_rate(): Computes the mutation rate for evolution.
   - evolve(): Evolves the population for one generation.
   - adaptive_population(): Adjusts population size based on time and fitness.
   - best_expression(): Returns the best expression in the population.
   - fitness(): Computes fitness metrics for an expression.
   - calculate_fitness(): Calculates fitness values over training data.
   - test_fitness(): Evaluates fitness on test data." style="rounded=1;whiteSpace=wrap;html=1;fillColor=#D5E8D4;strokeColor=#82B366;fontStyle=1;" vertex="1" parent="1">
          <mxGeometry x="30" y="30" width="420" height="200" as="geometry"/>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
